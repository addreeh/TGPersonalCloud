import 'package:country_picker/country_picker.dart';
import 'package:flutter/material.dart';
import 'package:flutter_otp_text_field/flutter_otp_text_field.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:top_snackbar_flutter/custom_snack_bar.dart';
import 'package:top_snackbar_flutter/top_snack_bar.dart';
import '../functions.dart';
import '../in/channels.dart';
import 'package:transition/transition.dart';

class SplashPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GestureDetector(
        onTap: () {
          Navigator.push(
              context,
              Transition(
                  child: LoginPage(), transitionEffect: TransitionEffect.FADE));
        },
        child: Container(
          width: double.infinity,
          height: double.infinity,
          child: Image.asset(
            MediaQuery.of(context).platformBrightness == Brightness.dark
                ? 'assets/dark_mode/splash.jpg'
                : 'assets/light_mode/splash.jpg',
            fit: BoxFit.cover,
          ),
        ),
      ),
    );
  }
}

class LoginPage extends StatefulWidget {
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final TextEditingController prefixController = TextEditingController();
  final TextEditingController phoneNumberController = TextEditingController();

  @override
  void dispose() {
    prefixController.dispose();
    phoneNumberController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: onBackPressed,
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        body: SafeArea(
          top: true,
          child: Stack(
            children: [
              Align(
                alignment: const AlignmentDirectional(0.00, 0.00),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.asset(
                    Theme.of(context).brightness == Brightness.dark
                        ? 'assets/dark_mode/login3.jpg'
                        : 'assets/light_mode/login.jpg',
                    width: 536,
                    height: 839,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              Align(
                alignment: const AlignmentDirectional(0, 0.15),
                child: SizedBox(
                  width: 300,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Container(
                              width: 75,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(10.0),
                                color: Theme.of(context).brightness ==
                                        Brightness.dark
                                    ? const Color(0xFFF5F9FE)
                                    : const Color(0xFFEFF4F9),
                              ),
                              child: TextField(
                                readOnly: true,
                                controller: prefixController,
                                cursorColor:
                                    const Color.fromRGBO(88, 172, 255, 1),
                                keyboardType: TextInputType.phone,
                                style: GoogleFonts.poppins(
                                  fontWeight: FontWeight.w500,
                                  color: Color(0xFF7C8BA0),
                                ),
                                decoration: InputDecoration(
                                  border: InputBorder.none,
                                  labelStyle: GoogleFonts.poppins(
                                    fontWeight: FontWeight.w500,
                                    color: Color(0xFF7C8BA0),
                                  ),
                                  filled: true,
                                  fillColor: Colors.transparent,
                                  labelText: 'Prefix',
                                  contentPadding:
                                      EdgeInsets.fromLTRB(15, 10, 12, 10),
                                ),
                                onTap: () {
                                  // Cuando el campo de texto se toca, muestra el selector de países.
                                  showCountryPicker(
                                    context: context,
                                    countryListTheme: CountryListThemeData(
                                        backgroundColor: Color(0xFF565656),
                                        textStyle: GoogleFonts.poppins(
                                          fontWeight: FontWeight.w500,
                                          color: Color(0xFFFFFFFF),
                                        ),
                                        searchTextStyle: GoogleFonts.poppins(
                                          fontWeight: FontWeight.w500,
                                          color: Color(0xFFFFFFFF),
                                        ),
                                        margin:
                                            EdgeInsets.fromLTRB(20, 20, 20, 0),
                                        flagSize: 20),
                                    showPhoneCode: true,
                                    onSelect: (Country country) {
                                      // Cuando se selecciona un país, actualiza el valor del prefijo.
                                      setState(() {
                                        prefixController.text =
                                            country.phoneCode;
                                      });
                                    },
                                  );
                                },
                              )),
                          const SizedBox(width: 25),
                          Container(
                            width: 200,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10.0),
                              color: Theme.of(context).brightness ==
                                      Brightness.dark
                                  ? const Color(0xFFF5F9FE)
                                  : const Color(0xFFEFF4F9),
                            ),
                            child: TextField(
                              controller: phoneNumberController,
                              cursorColor:
                                  const Color.fromRGBO(88, 172, 255, 1),
                              keyboardType: TextInputType.phone,
                              style: GoogleFonts.poppins(
                                fontWeight: FontWeight.w500,
                                color: Color(0xFF7C8BA0),
                              ),
                              decoration: InputDecoration(
                                suffixIcon: IconButton(
                                  onPressed: () {
                                    phoneNumberController.clear();
                                    setState(() {});
                                  },
                                  icon: const Icon(
                                    Icons.clear,
                                    color: Color(0xFF7C8BA0),
                                    size: 20,
                                  ),
                                ),
                                border: InputBorder.none,
                                labelStyle: GoogleFonts.poppins(
                                  fontWeight: FontWeight.w500,
                                  color: Color(0xFF7C8BA0),
                                ),
                                filled: true,
                                fillColor: Colors.transparent,
                                labelText: 'Phone Number',
                                contentPadding:
                                    const EdgeInsets.fromLTRB(15, 10, 12, 10),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 40),
                      Opacity(
                        opacity: 0,
                        child: ElevatedButton(
                          onPressed: () async {
                            FocusScope.of(context).unfocus();

                            showLoadingDialog(context);

                            final responseCode =
                                await sendPhoneNumberToTelegram(
                              "34616789929",
                            );

                            if (responseCode == 777) {
                              Navigator.of(context).pop();

                              // ScaffoldMessenger.of(context).showSnackBar(
                              // const SnackBar(
                              // content: Text(
                              // "Invalid phone number. Try it again."),
                              // ),
                              // );
                              showTopSnackBar(
                                Overlay.of(context),
                                CustomSnackBar.error(
                                  message:
                                      "Something went wrong. Please check your credentials and try again",
                                  textStyle: GoogleFonts.poppins(),
                                ),
                              );
                            } else if (responseCode == 500) {
                              Navigator.push(
                                context,
                                Transition(
                                  child: OtpPage(prefixController.text +
                                      phoneNumberController.text),
                                  transitionEffect: TransitionEffect.FADE,
                                ),
                              );
                            } else {
                              Navigator.push(
                                context,
                                Transition(
                                  child: EnterPasswordPage("34616789929"),
                                  transitionEffect: TransitionEffect.FADE,
                                ),
                              );
                            }
                          },
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 200,
                              vertical: 20,
                            ),
                          ),
                          child: const Text(''), // Texto del botón
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class OtpPage extends StatefulWidget {
  final String phoneNumber;

  OtpPage(this.phoneNumber);

  @override
  _OtpPageState createState() => _OtpPageState();
}

class _OtpPageState extends State<OtpPage> {
  final TextEditingController otpController = TextEditingController();

  String otpCode = "";

  @override
  void dispose() {
    otpController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: onBackPressed,
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        body: SafeArea(
          top: true,
          child: Stack(
            children: [
              Align(
                alignment: const AlignmentDirectional(0.00, 0.00),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.asset(
                    Theme.of(context).brightness == Brightness.dark
                        ? 'assets/dark_mode/otp2.jpg'
                        : 'assets/light_mode/otp2.jpg',
                    width: 536,
                    height: 839,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              Align(
                alignment: const AlignmentDirectional(0, 0.15),
                child: SizedBox(
                  width: 300,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      OtpTextField(
                        textStyle: GoogleFonts.poppins(
                          fontWeight: FontWeight.w500,
                          color: Color(0xFF7C8BA0),
                        ),
                        borderRadius:
                            const BorderRadius.all(Radius.circular(10.0)),
                        cursorColor: const Color(0xFF58ACFF),
                        filled: true,
                        fillColor:
                            Theme.of(context).brightness == Brightness.dark
                                ? const Color(0xFFF5F9FE)
                                : const Color(0xFFEFF4F9),
                        fieldWidth: 50,
                        numberOfFields: 5,
                        enabledBorderColor:
                            Theme.of(context).brightness == Brightness.dark
                                ? const Color(0xFFF5F9FE)
                                : const Color(0xFFEFF4F9),
                        borderColor:
                            Theme.of(context).brightness == Brightness.dark
                                ? const Color(0xFFF5F9FE)
                                : const Color(0xFFEFF4F9),
                        focusedBorderColor: const Color(0xFF58ACFF),
                        showFieldAsBox: true,
                        onCodeChanged: (String code) {},
                        //runs when every textfield is filled
                        onSubmit: (String verificationCode) {
                          otpCode = verificationCode;
                        }, // end on
                      ),
                      const SizedBox(height: 40),
                      Opacity(
                        opacity: 0,
                        child: ElevatedButton(
                          onPressed: () async {
                            print(otpCode);
                            print(widget.phoneNumber);
                            FocusScope.of(context).unfocus();

                            showLoadingDialog(context);

                            print("NUMERASO ${widget.phoneNumber}");

                            final responseCode =
                                await sendVerificationCodeToTelegram(
                                    otpCode, widget.phoneNumber);

                            if (responseCode == 777) {
                              Navigator.of(context).pop();
                              showTopSnackBar(
                                Overlay.of(context),
                                CustomSnackBar.error(
                                  message:
                                      "Something went wrong. Please check your credentials and try again",
                                  textStyle: GoogleFonts.poppins(),
                                ),
                              );
                            } else if (responseCode == 500) {
                              Navigator.push(
                                context,
                                Transition(
                                  child: CreatePasswordPage(
                                      widget.phoneNumber, otpCode),
                                  transitionEffect: TransitionEffect.FADE,
                                ),
                              );
                            }
                          },
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 200,
                              vertical: 20,
                            ),
                          ),
                          child: const Text(''),
                        ),
                      )
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class CreatePasswordPage extends StatefulWidget {
  final String phoneNumber;
  final String otpCode;
  CreatePasswordPage(this.phoneNumber, this.otpCode);

  @override
  _CreatePasswordPageState createState() => _CreatePasswordPageState();
}

class _CreatePasswordPageState extends State<CreatePasswordPage> {
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController repeatPasswordController =
      TextEditingController();
  late bool passwordVisibility = true;
  late bool repeatPasswordVisibility = true;

  @override
  void dispose() {
    passwordController.dispose();
    repeatPasswordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: onBackPressed,
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        body: SafeArea(
          top: true,
          child: Stack(
            children: [
              Align(
                alignment: const AlignmentDirectional(0.00, 0.00),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.asset(
                    Theme.of(context).brightness == Brightness.dark
                        ? 'assets/dark_mode/createpassword.jpg'
                        : 'assets/light_mode/createpassword.jpg',
                    width: 536,
                    height: 839,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              Align(
                alignment: const AlignmentDirectional(0, 0.055),
                child: SizedBox(
                  width: 300,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextField(
                        obscureText: passwordVisibility,
                        controller: passwordController,
                        cursorColor: const Color.fromRGBO(88, 172, 255, 1),
                        keyboardType: TextInputType.text,
                        style: const TextStyle(
                          fontFamily: 'Poppins',
                          color: Color(0xFF7C8BA0),
                          fontWeight: FontWeight.w500,
                        ),
                        decoration: InputDecoration(
                          suffixIcon: InkWell(
                            onTap: () => setState(
                              () => passwordVisibility = !passwordVisibility,
                            ),
                            focusNode: FocusNode(skipTraversal: true),
                            child: Icon(
                              passwordVisibility
                                  ? Icons.visibility_outlined
                                  : Icons.visibility_off_outlined,
                              color: const Color(0xFF7C8BA0),
                              size: 20,
                            ),
                          ),
                          enabledBorder: UnderlineInputBorder(
                            borderSide: BorderSide(
                              color: Theme.of(context).brightness ==
                                      Brightness.dark
                                  ? const Color(
                                      0xFFF5F9FE) // Color del borde en modo oscuro
                                  : const Color(
                                      0xFFEFF4F9), // Color del borde en modo claro
                              width: 0,
                            ),
                          ),
                          focusedBorder: UnderlineInputBorder(
                            borderSide: BorderSide(
                              color: Theme.of(context).brightness ==
                                      Brightness.dark
                                  ? const Color(
                                      0xFFF5F9FE) // Color del borde en modo oscuro
                                  : const Color(
                                      0xFFEFF4F9), // Color del borde en modo claro
                              width: 0,
                            ),
                          ),
                          labelStyle: const TextStyle(
                            fontFamily: 'Readex Pro',
                            color: Color(0xFF7C8BA0),
                            fontWeight: FontWeight.w500,
                          ),
                          filled: true,
                          fillColor: Theme.of(context).brightness ==
                                  Brightness.dark
                              ? const Color(
                                  0xFFF5F9FE) // Color del fondo en modo oscuro
                              : const Color(
                                  0xFFEFF4F9), // Color del fondo en modo claro
                          labelText: 'Password',
                          contentPadding: EdgeInsets.symmetric(vertical: 10.0),
                        ),
                      ),
                      const SizedBox(height: 20),
                      TextField(
                        obscureText: repeatPasswordVisibility,
                        controller: repeatPasswordController,
                        cursorColor: const Color.fromRGBO(88, 172, 255, 1),
                        keyboardType: TextInputType.text,
                        style: const TextStyle(
                          fontFamily: 'Poppins',
                          color: Color(0xFF7C8BA0),
                          fontWeight: FontWeight.w500,
                        ),
                        decoration: InputDecoration(
                          suffixIcon: InkWell(
                            onTap: () => setState(
                              () => repeatPasswordVisibility =
                                  !repeatPasswordVisibility,
                            ),
                            focusNode: FocusNode(skipTraversal: true),
                            child: Icon(
                              repeatPasswordVisibility
                                  ? Icons.visibility_outlined
                                  : Icons.visibility_off_outlined,
                              color: const Color(0xFF7C8BA0),
                              size: 20,
                            ),
                          ),
                          enabledBorder: UnderlineInputBorder(
                            borderSide: BorderSide(
                              color: Theme.of(context).brightness ==
                                      Brightness.dark
                                  ? const Color(
                                      0xFFF5F9FE) // Color del borde en modo oscuro
                                  : const Color(
                                      0xFFEFF4F9), // Color del borde en modo claro
                              width: 0,
                            ),
                          ),
                          focusedBorder: UnderlineInputBorder(
                            borderSide: BorderSide(
                              color: Theme.of(context).brightness ==
                                      Brightness.dark
                                  ? const Color(
                                      0xFFF5F9FE) // Color del borde en modo oscuro
                                  : const Color(
                                      0xFFEFF4F9), // Color del borde en modo claro
                              width: 0,
                            ),
                          ),
                          labelStyle: const TextStyle(
                            fontFamily: 'Readex Pro',
                            color: Color(0xFF7C8BA0),
                            fontWeight: FontWeight.w500,
                          ),
                          filled: true,
                          fillColor: Theme.of(context).brightness ==
                                  Brightness.dark
                              ? const Color(
                                  0xFFF5F9FE) // Color del fondo en modo oscuro
                              : const Color(
                                  0xFFEFF4F9), // Color del fondo en modo claro
                          labelText: 'Repeat Password',
                          contentPadding:
                              const EdgeInsets.symmetric(vertical: 10.0),
                        ),
                      ),
                      const SizedBox(height: 30),
                      Opacity(
                        opacity: 0,
                        child: ElevatedButton(
                          onPressed: () async {
                            FocusScope.of(context).unfocus();

                            showLoadingDialog(context);

                            if (passwordController.text !=
                                repeatPasswordController.text) {
                              Navigator.of(context).pop();
                              showTopSnackBar(
                                Overlay.of(context),
                                CustomSnackBar.error(
                                  message:
                                      "Something went wrong. Please check your credentials and try again",
                                ),
                              );
                            } else {
                              if (await sendPasswordToServer(
                                      widget.otpCode,
                                      widget.phoneNumber,
                                      passwordController.text) ==
                                  true) {
                                Navigator.push(
                                  context,
                                  Transition(
                                    child: ChannelsPage(widget.phoneNumber),
                                    transitionEffect: TransitionEffect.FADE,
                                  ),
                                );
                              } else {
                                Navigator.of(context).pop();
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content:
                                        Text("Invalid password. Try it again."),
                                  ),
                                );
                              }
                            }
                          },
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 200,
                              vertical: 20,
                            ),
                          ),
                          child: const Text(''),
                        ),
                      )
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class EnterPasswordPage extends StatefulWidget {
  final String phoneNumber;

  EnterPasswordPage(this.phoneNumber);

  @override
  EnterPasswordPageState createState() => EnterPasswordPageState();
}

class EnterPasswordPageState extends State<EnterPasswordPage> {
  final TextEditingController passwordController = TextEditingController();

  late bool passwordVisibility = true;

  @override
  void dispose() {
    passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: onBackPressed,
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        body: SafeArea(
          top: true,
          child: Stack(
            children: [
              Align(
                alignment: const AlignmentDirectional(0.00, 0.00),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.asset(
                    Theme.of(context).brightness == Brightness.dark
                        ? 'assets/dark_mode/enterpassword.jpg'
                        : 'assets/light_mode/enterpassword.jpg',
                    width: 536,
                    height: 839,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              Align(
                alignment: const AlignmentDirectional(0, 0.13),
                child: SizedBox(
                  width: 300,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextField(
                        obscureText: passwordVisibility,
                        controller: passwordController,
                        cursorColor: const Color.fromRGBO(88, 172, 255, 1),
                        keyboardType: TextInputType.text,
                        style: GoogleFonts.poppins(
                          fontWeight: FontWeight.w500,
                          color: Color(0xFF7C8BA0),
                        ),
                        decoration: InputDecoration(
                          suffixIcon: InkWell(
                            onTap: () => setState(
                              () => passwordVisibility = !passwordVisibility,
                            ),
                            focusNode: FocusNode(skipTraversal: true),
                            child: Icon(
                              passwordVisibility
                                  ? Icons.visibility_outlined
                                  : Icons.visibility_off_outlined,
                              color: const Color(0xFF7C8BA0),
                              size: 20,
                            ),
                          ),
                          enabledBorder: UnderlineInputBorder(
                            borderSide: BorderSide(
                              color: Theme.of(context).brightness ==
                                      Brightness.dark
                                  ? const Color(
                                      0xFFF5F9FE) // Color del borde en modo oscuro
                                  : const Color(
                                      0xFFEFF4F9), // Color del borde en modo claro
                              width: 0,
                            ),
                          ),
                          focusedBorder: UnderlineInputBorder(
                            borderSide: BorderSide(
                              color: Theme.of(context).brightness ==
                                      Brightness.dark
                                  ? const Color(
                                      0xFFF5F9FE) // Color del borde en modo oscuro
                                  : const Color(
                                      0xFFEFF4F9), // Color del borde en modo claro
                              width: 0,
                            ),
                          ),
                          labelStyle: GoogleFonts.poppins(
                            fontWeight: FontWeight.w500,
                            color: Color(0xFF7C8BA0),
                          ),
                          filled: true,
                          fillColor: Theme.of(context).brightness ==
                                  Brightness.dark
                              ? const Color(
                                  0xFFF5F9FE) // Color del fondo en modo oscuro
                              : const Color(
                                  0xFFEFF4F9), // Color del fondo en modo claro
                          labelText: 'Password',
                          contentPadding:
                              const EdgeInsets.symmetric(vertical: 10.0),
                        ),
                      ),
                      const SizedBox(height: 30),
                      Opacity(
                        opacity: 0,
                        child: ElevatedButton(
                          onPressed: () async {
                            FocusScope.of(context).unfocus();

                            showLoadingDialog(context);

                            if (await sendPasswordToServer(
                                    "", "34616789929", "adrip") ==
                                true) {
                              Navigator.push(
                                context,
                                Transition(
                                  child: ChannelsPage("34616789929"),
                                  transitionEffect: TransitionEffect.FADE,
                                ),
                              );
                            } else {
                              Navigator.of(context).pop();
                              showTopSnackBar(
                                Overlay.of(context),
                                CustomSnackBar.error(
                                  message:
                                      "Something went wrong. Please check your credentials and try again",
                                  textStyle: GoogleFonts.poppins(),
                                ),
                              );
                            }
                          },
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 200,
                              vertical: 20,
                            ),
                          ),
                          child: const Text(''),
                        ),
                      )
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
