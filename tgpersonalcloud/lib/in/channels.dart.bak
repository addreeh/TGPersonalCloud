// ignore_for_file: use_build_context_synchronously

import 'dart:async';

import 'package:dropdown_plus/dropdown_plus.dart';
import 'package:expansion_tile_card/expansion_tile_card.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:loading_animation_widget/loading_animation_widget.dart';
import 'package:http/http.dart' as http;
import 'package:tgpersonalcloud/in/topics.dart';
import 'package:top_snackbar_flutter/custom_snack_bar.dart';
import 'dart:convert';
import 'package:top_snackbar_flutter/top_snack_bar.dart';
import 'package:transition/transition.dart';

import 'package:slide_popup_dialog_null_safety/slide_popup_dialog.dart'
    as slideDialog;

String server = "http://10.0.2.2:5000";

class ChannelsPage extends StatefulWidget {
  final String phoneNumber;
  const ChannelsPage(this.phoneNumber, {super.key});

  @override
  ChannelsPageState createState() => ChannelsPageState();
}

class ChannelsPageState extends State<ChannelsPage> {
  bool isLoading = true;
  bool isCreated = false;
  bool isLoadingCreate = false;

  List<dynamic> userGroups = [];

  @override
  void initState() {
    super.initState();
    try {
      _initializeAsyncData();
    } catch (e) {
      if (kDebugMode) {
        print(e);
      }
    }
  }

  // OBTENER USUARIOS
  Future<Map<String, dynamic>> getUsers(String phoneNumber) async {
    final response = await http.post(Uri.parse('$server/get_users'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'phone_number': "+$phoneNumber"}));

    if (response.statusCode == 200) {
      final users = jsonDecode(response.body);
      return users;
    } else {
      throw Exception('Error al obtener los grupos');
    }
  }

  // OBTENER GRUPOS DEL USUARIO
  Future<Map<String, dynamic>> getChannels(String phoneNumber) async {
    final response = await http.post(Uri.parse('$server/get_channels'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'phone_number': "+$phoneNumber"}));

    if (response.statusCode == 200) {
      final channels = jsonDecode(response.body);
      return channels;
    } else {
      throw Exception('Error al obtener los grupos');
    }
  }

  Future<bool> _onBackPressed() {
    return Future.value(false);
  }

  Future<void> _initializeAsyncData() async {
    try {
      setState(() {
        isLoading = true; // Indicar que se est치 cargando
      });

      final groups = await getChannels(widget.phoneNumber);

      setState(() {
        userGroups = groups['groups'];
        // userGroups = [];
        isLoading = false; // Indicar que la carga ha finalizado
      });
    } catch (e) {
      if (kDebugMode) {
        print("Error al obtener grupos: $e");
      }
    }
  }

  showUsers() async {
    final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
    String? selectedValue;
    final usersData = await getUsers(widget.phoneNumber);
    // print(usersData);
    final usersList = usersData['users'];

    List<String> itemsitos = [];
    // print(usersList);

    for (var element in usersList) {
      print(element);
      itemsitos.add(element);
    }

    print("DESPUES $itemsitos");

    final userStrings = usersList.map((user) => jsonEncode(user)).toList();

    for (var element in userStrings) {
      print(element);
    }

    slideDialog.showSlideDialog(
      context: context,
      child: Column(
        children: [
          Text("Usuarios:"),
          // for (String userString in userStrings) Text(userString),
          TextDropdownFormField(
            options: itemsitos,
            decoration: InputDecoration(
                border: OutlineInputBorder(),
                suffixIcon: Icon(Icons.arrow_drop_down),
                labelText: "Gender"),
            dropdownHeight: 120,
            onChanged: (dynamic str) {
              print(str);
            },
          ),
        ],
      ),
      barrierColor: Colors.white.withOpacity(0.7),
      pillColor: const Color.fromRGBO(88, 172, 255, 1),
      backgroundColor: const Color(0xFF484848),
    );
  }

  showLoadingDialog(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: const Color(0xFF484848),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              LoadingAnimationWidget.waveDots(
                  color: const Color.fromRGBO(88, 172, 255, 1), size: 50),
              const SizedBox(height: 20.0),
              Text(
                'Loading ...',
                style: GoogleFonts.poppins(
                  fontWeight: FontWeight.w500,
                  color: const Color(0xFFFFFFFF),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Future<bool> showcreateChannelDialog(BuildContext context) async {
    String groupName = '';
    String groupDescription = '';
    bool isCreated = false;

    // Utilizamos un Completer para esperar la ejecuci칩n de createChannel
    Completer<bool> completer = Completer<bool>();

    await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: const Color(0xFF484848),
          title: Text(
            'Create New Group',
            style: GoogleFonts.montserrat(
                fontStyle: FontStyle.normal, fontWeight: FontWeight.w500),
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                onChanged: (value) {
                  groupName = value;
                },
                decoration: const InputDecoration(
                  hintText: 'Group Name',
                  focusColor: Color(0xFFFFFFFF),
                ),
              ),
              TextField(
                // Nuevo campo para la descripci칩n
                onChanged: (value) {
                  groupDescription = value;
                },
                decoration: const InputDecoration(
                  hintText: 'Group Description',
                  focusColor: Color(0xFFFFFFFF),
                ),
              ),
            ],
          ),
          actions: <Widget>[
            ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  // Resolvemos el Completer con false si se cancela
                  completer.complete(false);
                },
                style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                child: const Text('Cancel')),
            ElevatedButton(
                onPressed: () async {
                  Navigator.of(context).pop();
                  isCreated = await createChannel(
                      widget.phoneNumber, groupName, groupDescription);
                  // Resolvemos el Completer con el valor de isCreated
                  completer.complete(isCreated);
                },
                style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.lightGreen),
                child: const Text('Create')),
          ],
        );
      },
    );

    // Esperamos a que el Completer se complete antes de devolver el valor
    isCreated = await completer.future;

    return isCreated;
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Future<bool> showEditChannelDialog(
      BuildContext context, int idChannel) async {
    String groupName = '';
    bool isEdited = false;

    // Utilizamos un Completer para esperar la ejecuci칩n de createChannel
    Completer<bool> completer = Completer<bool>();

    await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: const Color(0xFF484848),
          title: Text(
            'Edit Group',
            style: GoogleFonts.montserrat(
                fontStyle: FontStyle.normal, fontWeight: FontWeight.w500),
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                onChanged: (value) {
                  groupName = value;
                },
                decoration: const InputDecoration(
                  hintText: 'Group Name',
                  focusColor: Color(0xFFFFFFFF),
                ),
              ),
            ],
          ),
          actions: <Widget>[
            ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  // Resolvemos el Completer con false si se cancela
                  completer.complete(false);
                },
                style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                child: const Text('Cancel')),
            ElevatedButton(
                onPressed: () async {
                  Navigator.of(context).pop();
                  isEdited = await editChannel(
                      widget.phoneNumber, idChannel, groupName);
                  // Resolvemos el Completer con el valor de isEdited
                  completer.complete(isEdited);
                },
                style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.lightGreen),
                child: const Text('Edit')),
          ],
        );
      },
    );

    // Esperamos a que el Completer se complete antes de devolver el valor
    isEdited = await completer.future;

    return isEdited;
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Future<bool> showDeleteChannelDialog(
      BuildContext context, int idChannel) async {
    bool isDeleted = false;

    // Utilizamos un Completer para esperar la ejecuci칩n de createChannel
    Completer<bool> completer = Completer<bool>();

    await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: const Color(0xFF484848),
          title: Text(
            'Delete Group',
            style: GoogleFonts.montserrat(
                fontStyle: FontStyle.normal, fontWeight: FontWeight.w500),
          ),
          actions: <Widget>[
            ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  // Resolvemos el Completer con false si se cancela
                  completer.complete(false);
                },
                style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                child: const Text('Cancel')),
            ElevatedButton(
                onPressed: () async {
                  Navigator.of(context).pop();
                  isDeleted =
                      await deleteChannel(widget.phoneNumber, idChannel);
                  // Resolvemos el Completer con el valor de isDeleted
                  completer.complete(isDeleted);
                },
                style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.lightGreen),
                child: const Text('Delete')),
          ],
        );
      },
    );

    // Esperamos a que el Completer se complete antes de devolver el valor
    isDeleted = await completer.future;

    return isDeleted;
  }

  // CREAR GRUPO
  Future<bool> createChannel(
      String phoneNumber, String title, String desc) async {
    try {
      showLoadingDialog(context); // Muestra el di치logo de carga

      final response = await http.post(Uri.parse('$server/create_channel'),
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode(
              {'phone_number': "+$phoneNumber", 'title': title, 'desc': desc}));

      if (response.statusCode == 200) {
        if (kDebugMode) {
          print("Grupo creado");
        }
        final groups = await getChannels(widget.phoneNumber);

        setState(() {
          userGroups = groups['groups'];
        });
        Navigator.of(context).pop();

        return true;
      } else {
        throw Exception('Error al crear el grupo');
      }
    } catch (error) {
      if (kDebugMode) {
        print(error);
      }
    }

    return false;
  }

  // CREAR GRUPO
  Future<bool> editChannel(
      String phoneNumber, int idChannel, String title) async {
    try {
      showLoadingDialog(context); // Muestra el di치logo de carga

      final response = await http.post(Uri.parse('$server/edit_channel'),
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode({
            'phone_number': "+$phoneNumber",
            'id': idChannel,
            'title': title
          }));

      if (response.statusCode == 200) {
        if (kDebugMode) {
          print("Grupo editado");
        }
        final groups = await getChannels(widget.phoneNumber);

        setState(() {
          userGroups = groups['groups'];
        });
        Navigator.of(context).pop();

        return true;
      } else {
        throw Exception('Error al editar el grupo');
      }
    } catch (error) {
      if (kDebugMode) {
        print(error);
      }
    }

    return false;
  }

  // BORRAR GRUPO
  Future<bool> deleteChannel(String phoneNumber, int idChannel) async {
    try {
      showLoadingDialog(context); // Muestra el di치logo de carga

      final response = await http.post(Uri.parse('$server/delete_channel'),
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode({'phone_number': "+$phoneNumber", 'id': idChannel}));

      if (response.statusCode == 200) {
        if (kDebugMode) {
          print("Grupo eliminado");
        }
        final groups = await getChannels(widget.phoneNumber);

        setState(() {
          userGroups = groups['groups'];
        });
        Navigator.of(context).pop();

        return true;
      } else {
        throw Exception('Error al eliminar el grupo');
      }
    } catch (error) {
      if (kDebugMode) {
        print(error);
      }
    }

    return false;
  }

  Future<void> _showPopup(BuildContext context) async {
    await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: const Color(0xFF484848),
          title: Text(
            "T칤tulo del Popup",
            style: GoogleFonts.poppins(
              fontWeight: FontWeight.w500,
              color: const Color(0xFF7C8BA0),
            ),
          ),
          content: Text(
            "Este es un mensaje de ejemplo en el popup.",
            style: GoogleFonts.poppins(
              fontWeight: FontWeight.w500,
              color: const Color(0xFF7C8BA0),
            ),
          ),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(
                "Cerrar",
                style: GoogleFonts.poppins(
                  fontWeight: FontWeight.w500,
                  color: const Color(0xFF7C8BA0),
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onBackPressed,
      child: Scaffold(
        appBar: AppBar(
          title: Padding(
            padding: const EdgeInsets.only(left: 20.0),
            child: Text(
              "TGPersonalCloud",
              style: GoogleFonts.poppins(
                fontSize: 20.0,
                fontWeight: FontWeight.bold,
                color: const Color(0xFFFFFFFF),
              ),
            ),
          ),
          titleSpacing: 0.0,
          toolbarHeight: 60.2,
          toolbarOpacity: 0.8,
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.only(
              bottomRight: Radius.circular(25),
              bottomLeft: Radius.circular(25),
            ),
          ),
          elevation: 0.0,
          backgroundColor: const Color(0xFF222222),
          actions: [
            IconButton(
              onPressed: () {
                _initializeAsyncData();
              },
              icon: const Icon(
                  Icons.refresh), // Aqu칤 puedes usar el icono de recarga
            ),
            IconButton(
              onPressed: () => {
                _showPopup(context),
              },
              icon: const Icon(Icons.more_vert),
            ),
          ],
          shadowColor: const Color(0xFF58ACFF),
          automaticallyImplyLeading: false,
        ),
        backgroundColor: const Color(0xFF1E1E1E),
        body: Column(
          children: <Widget>[
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: Center(
                child: Text(
                  "Canales BackUp",
                  style: GoogleFonts.poppins(
                    fontSize: 18.0,
                    fontWeight: FontWeight.bold,
                    color: const Color(0xFF58ACFF),
                  ),
                ),
              ),
            ),
            Expanded(
              child: isLoading
                  ? const Center(
                      child: CircularProgressIndicator(),
                    )
                  : userGroups.isNotEmpty
                      ? ListView.builder(
                          itemCount: userGroups.length,
                          itemBuilder: (BuildContext context, int index) {
                            final group = userGroups[index];
                            final groupId = group['id'];
                            final groupTitle = group['title'];
                            final groupDesc = group['desc'];
                            final GlobalKey<ExpansionTileCardState> cardKey =
                                GlobalKey();

                            return Column(
                              children: [
                                Container(
                                  margin:
                                      const EdgeInsets.fromLTRB(25, 0, 25, 0),
                                  decoration: const BoxDecoration(
                                    borderRadius:
                                        BorderRadius.all(Radius.circular(10.0)),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Color(0xFF58ACFF),
                                        blurRadius: 5.0,
                                      ),
                                    ],
                                  ),
                                  child: ExpansionTileCard(
                                    //initialPadding: EdgeInsets.symmetric(
                                    //  horizontal: 25.0,
                                    //),
                                    borderRadius: BorderRadius.circular(10),
                                    baseColor: const Color(0xFF3C3C3C),
                                    expandedColor: const Color(0xFF565656),
                                    expandedTextColor: const Color(0xFFFFFFFF),
                                    key: cardKey,
                                    leading: CircleAvatar(
                                      child: Text(
                                        (index + 1).toString(),
                                        style: GoogleFonts.poppins(
                                          fontSize: 16.0,
                                          fontWeight: FontWeight.bold,
                                          color: const Color(0xFFFFFFFF),
                                        ),
                                      ),
                                    ),
                                    title: Text(
                                      groupTitle,
                                      style: GoogleFonts.poppins(
                                        fontSize: 16.0,
                                        fontWeight: FontWeight.bold,
                                        color: const Color(0xFFFFFFFF),
                                      ),
                                    ),
                                    subtitle: Text(
                                      groupDesc.isEmpty
                                          ? 'Copias de seguridad del canal $groupTitle'
                                          : groupDesc,
                                      style: GoogleFonts.poppins(
                                        fontSize: 12.0,
                                        fontWeight: FontWeight.normal,
                                        color: const Color(0xFFFFFFFF),
                                      ),
                                    ),
                                    children: <Widget>[
                                      const Divider(
                                        thickness: 3.0,
                                        height: 1.0,
                                        color: Color(0xFF58ACFF),
                                      ),
                                      ButtonBar(
                                        alignment:
                                            MainAxisAlignment.spaceEvenly,
                                        buttonHeight: 52.0,
                                        buttonMinWidth: 90.0,
                                        children: <Widget>[
                                          ElevatedButton(
                                            style: ElevatedButton.styleFrom(
                                              backgroundColor:
                                                  const Color(0xFFD3E4FF),
                                              shape: RoundedRectangleBorder(
                                                borderRadius:
                                                    BorderRadius.circular(20.0),
                                              ),
                                            ),
                                            onPressed: () async {
                                              Navigator.push(
                                                context,
                                                Transition(
                                                  child: TopicsPage(
                                                      widget.phoneNumber,
                                                      groupId,
                                                      groupTitle),
                                                  transitionEffect:
                                                      TransitionEffect.FADE,
                                                ),
                                              );
                                            },
                                            child: Padding(
                                              padding:
                                                  const EdgeInsets.all(12.0),
                                              child: Text(
                                                "Show Topics",
                                                style: GoogleFonts.poppins(
                                                  fontSize: 12.0,
                                                  fontWeight: FontWeight.w500,
                                                  color:
                                                      const Color(0xFF1E1E1E),
                                                ),
                                              ),
                                            ),
                                          ),
                                          Ink(
                                            decoration: ShapeDecoration(
                                              color: const Color(0xFF2F4156),
                                              shape: RoundedRectangleBorder(
                                                borderRadius:
                                                    BorderRadius.circular(10.0),
                                              ),
                                            ),
                                            child: IconButton(
                                              icon: const Icon(Icons.person),
                                              color: Colors.white,
                                              onPressed: () async {
                                                print("USERS");
                                                showUsers();
                                              },
                                            ),
                                          ),
                                          Ink(
                                            decoration: ShapeDecoration(
                                              color: const Color(0xFF2F4156),
                                              shape: RoundedRectangleBorder(
                                                borderRadius:
                                                    BorderRadius.circular(10.0),
                                              ),
                                            ),
                                            child: IconButton(
                                              icon: const Icon(Icons.edit),
                                              color: Colors.white,
                                              onPressed: () async {
                                                showEditChannelDialog(
                                                    context, groupId);
                                              },
                                            ),
                                          ),
                                          Ink(
                                            decoration: ShapeDecoration(
                                              color: const Color(0xFF2F4156),
                                              shape: RoundedRectangleBorder(
                                                borderRadius:
                                                    BorderRadius.circular(10.0),
                                              ),
                                            ),
                                            child: IconButton(
                                              icon: const Icon(Icons.delete),
                                              color: Colors.white,
                                              onPressed: () async {
                                                showDeleteChannelDialog(
                                                    context, groupId);
                                              },
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                                const SizedBox(height: 20.0),
                                if (userGroups.length < 6 &&
                                    index == userGroups.length - 1)
                                  Container(
                                    width:
                                        150, // Ajusta el ancho del bot칩n aqu칤
                                    child: ElevatedButton(
                                      style: ElevatedButton.styleFrom(
                                        backgroundColor:
                                            const Color(0xFFD3E4FF),
                                        shape: RoundedRectangleBorder(
                                          borderRadius:
                                              BorderRadius.circular(20.0),
                                        ),
                                      ),
                                      onPressed: () async {
                                        if (kDebugMode) {
                                          print(userGroups.length - 1);
                                        }
                                        if (kDebugMode) {
                                          print(index);
                                        }
                                        if (await showcreateChannelDialog(
                                            context)) {
                                          showTopSnackBar(
                                            Overlay.of(context),
                                            const CustomSnackBar.success(
                                              message:
                                                  "Good job, your release is successful. Have a nice day",
                                            ),
                                          );
                                        } else {
                                          showTopSnackBar(
                                            Overlay.of(context),
                                            const CustomSnackBar.error(
                                              message:
                                                  "Something went wrong. Please check your credentials and try again",
                                            ),
                                          );
                                        }
                                      },
                                      child: Padding(
                                        padding: const EdgeInsets.fromLTRB(
                                            0, 10, 0, 10),
                                        child: Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.center,
                                          children: [
                                            const Icon(
                                              Icons.add,
                                              color: Color(0xFF1E1E1E),
                                              size: 20.0,
                                            ),
                                            SizedBox(
                                                width:
                                                    5), // Espacio entre el icono y el texto
                                            Text(
                                              "New Channel",
                                              style: GoogleFonts.poppins(
                                                fontSize: 12.0,
                                                fontWeight: FontWeight.w500,
                                                color: const Color(0xFF1E1E1E),
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),
                              ],
                            );
                          },
                        )
                      : Center(
                          child: Text(
                            "Todav칤a no existen grupos :(",
                            style: GoogleFonts.poppins(
                              fontSize: 18.0,
                              fontWeight: FontWeight.bold,
                              color: const Color(0xFFFFFFFF),
                            ),
                          ),
                        ),
            ),
          ],
        ),
      ),
    );
  }
}
